from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import extract # –î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∞—Å–∞/–º–∏–Ω—É—Ç—ã
from datetime import datetime, time

# –ò–º–ø–æ—Ä—Ç –∏–∑ –ø–∞–∫–µ—Ç–∞ db –∏ config
from db import SessionLocal, User
from config import logger
from aiogram import Bot
from keyboard import get_main_keyboard

async def send_reminder(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)."""
    logger.debug("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π scheduler'–æ–º...")
    session = SessionLocal()
    try:
        current_time = datetime.now().time()
        current_hour = current_time.hour
        current_minute = current_time.minute

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º (–Ω–µ –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ)
        users_to_remind = session.query(User).filter(
            User.reminder_time.isnot(None),
            extract('hour', User.reminder_time) == current_hour,
            extract('minute', User.reminder_time) == current_minute
        ).all()

        if users_to_remind:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({len(users_to_remind)}) –≤ {current_hour:02d}:{current_minute:02d}")
            for user in users_to_remind:
                try:
                    await bot.send_message(user.chat_id, "–ù–µ –∑–∞–±—É–¥—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å! üåü",
                                           reply_markup=get_main_keyboard())
                    logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.chat_id}")
                except Exception as e:
                    # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user.chat_id}: {e}")
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–∑–∞–¥–∞—á–∏ –ø—Ä–∏ BotBlocked, –Ω–æ –∫–æ–¥ —Å—Ç–∞–Ω–µ—Ç —Å–ª–æ–∂–Ω–µ–µ
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_reminder: {e}")
    finally:
        session.close()


def setup_scheduler(bot: Bot) -> AsyncIOScheduler:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow") # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å!

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É - –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    scheduler.add_job(send_reminder, 'cron', minute='*', args=[bot])
    logger.info("–ó–∞–¥–∞—á–∞ –µ–∂–µ–º–∏–Ω—É—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    try:
        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        raise

    return scheduler