from aiogram import types
from aiogram.dispatcher import FSMContext
from database import SessionLocal, User
from keyboard import get_main_keyboard
from config import logger
from states import ReminderStates
import re
from datetime import time

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_handler(message: types.Message, state: FSMContext):
    await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥–µ
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    session = SessionLocal()
    chat_id = str(message.chat.id)
    
    user = session.query(User).filter_by(chat_id=chat_id).first()
    if not user:
        session.add(User(chat_id=chat_id))
        session.commit()
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π /settime.", 
                            reply_markup=get_main_keyboard())
    else:
        await message.reply("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", 
                            reply_markup=get_main_keyboard())
    session.close()

async def set_time_handler(message: types.Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:30).\n"
                       "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.", 
                        reply_markup=get_main_keyboard())
    await state.set_state(ReminderStates.waiting_for_time)

async def help_handler(message: types.Message, state: FSMContext):
    await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥–µ
    await message.reply("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
                        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                        "/settime - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
                        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
                        "/stop - –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", 
                        reply_markup=get_main_keyboard())

async def status_handler(message: types.Message, state: FSMContext):
    await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥–µ
    session = SessionLocal()
    user = session.query(User).filter_by(chat_id=str(message.chat.id)).first()
    
    if user:
        time_str = user.reminder_time.strftime("%H:%M") if user.reminder_time else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        await message.reply(f"‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {time_str}", 
                            reply_markup=get_main_keyboard())
    else:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", 
                            reply_markup=get_main_keyboard())
    session.close()

async def stop_handler(message: types.Message, state: FSMContext):
    await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥–µ
    session = SessionLocal()
    user = session.query(User).filter_by(chat_id=str(message.chat.id)).first()
    if user:
        session.delete(user)
        session.commit()
        await message.reply("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ! ü´∂", 
                            reply_markup=get_main_keyboard())
    else:
        await message.reply("–í—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", 
                            reply_markup=get_main_keyboard())
    session.close()

async def cancel_handler(message: types.Message, state: FSMContext):
    await state.finish()
    await message.reply("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())

async def process_time_handler(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    time_pattern = r'^([01]\d|2[0-3]):([0-5]\d)$'
    if re.match(time_pattern, message.text):
        session = SessionLocal()
        chat_id = str(message.chat.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
        hours, minutes = map(int, message.text.split(':'))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        user = session.query(User).filter_by(chat_id=chat_id).first()
        if user:
            user.reminder_time = time(hour=hours, minute=minutes)
        else:
            user = User(chat_id=chat_id, reminder_time=time(hour=hours, minute=minutes))
            session.add(user)
        
        session.commit()
        session.close()
        
        await message.reply(f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {message.text}", 
                            reply_markup=get_main_keyboard())
        await state.finish()
    else:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:30).\n"
                          "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.", 
                            reply_markup=get_main_keyboard()) 